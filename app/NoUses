        binding.appbarMain.addOnOffsetChangedListener(AppBarLayout.OnOffsetChangedListener { appBarLayout, verticalOffset ->
            val percentage2 = abs(verticalOffset) / appBarLayout.totalScrollRange
            val percentage = binding.lnPresentation.measuredHeight
            when {
                abs(verticalOffset) == appBarLayout.totalScrollRange -> {
                    //Collapsed
                    //Hide here
//                    com.raqueveque.foodexample.AnimationUtils.slideDown(binding.lnPresentation)
//                    val anim = ValueAnimator.ofInt(percentage, percentage2)
//                    anim.addUpdateListener { valueAnimator ->
//                        val value = valueAnimator.animatedValue as Int
//                        val layoutParams: ViewGroup.LayoutParams =
//                            binding.lnPresentation.layoutParams
//                        layoutParams.height = value
//                        binding.lnPresentation.layoutParams = layoutParams
//                    }
//                    anim.duration = 1000
//                    anim.start()
                    val anim = AnimationUtils.loadAnimation(context, R.animator.zoom_out)
                    binding.lnPresentation.startAnimation(anim)
                }
                verticalOffset == 0 -> {
                    //Expanded
                    //Show here
//                    com.raqueveque.foodexample.AnimationUtils.slideUp(binding.lnPresentation)
//                    val anim = ValueAnimator.ofInt(percentage, percentage2)
//                    anim.addUpdateListener { valueAnimator ->
//                        val value = valueAnimator.animatedValue as Int
//                        val layoutParams: ViewGroup.LayoutParams =
//                            binding.lnPresentation.layoutParams
//                        layoutParams.height = value
//                        binding.lnPresentation.layoutParams = layoutParams
//                    }
//                    anim.duration = 1000
//                    anim.start()
                    val anim = AnimationUtils.loadAnimation(context, R.animator.zoom_in)
                    binding.lnPresentation.startAnimation(anim)
                }
                else -> {
                    //In Between

                }
            }
        })

        para el imageview
        doble click:
        extendemos la clase: View.OnTouchListener

        variables de entorno globales:

            private val TAG = "Touch"
            private val MIN_ZOOM = 1f
            val MAX_ZOOM = 1f

            // These matrices will be used to scale points of the image
            var matrix = Matrix()
            var savedMatrix = Matrix()

            // The 3 states (events) which the user is trying to perform
            val NONE = 0
            val DRAG = 1
            val ZOOM = 2
            var mode = NONE

            // these PointF objects are used to record the point(s) the user is touching
            var start = PointF()
            var mid = PointF()
            var oldDist = 1f

        // This class has methods that check if two clicks were registered
            // within a span of DOUBLE_CLICK_TIME_DELTA i.e., in our case
            // equivalent to 300 ms
            abstract class DoubleClickListener : View.OnClickListener {
                var lastClickTime: Long = 0
                override fun onClick(v: View?) {
                    val clickTime = System.currentTimeMillis()
                    if (clickTime - lastClickTime < DOUBLE_CLICK_TIME_DELTA) {
                        onDoubleClick(v)
                    }
                    lastClickTime = clickTime
                }

                abstract fun onDoubleClick(v: View?)

                companion object {
                    private const val DOUBLE_CLICK_TIME_DELTA: Long = 300 //milliseconds
                }
            }
                binding.foodImage.setOnClickListener(object : DoubleClickListener(){
                    override fun onDoubleClick(v: View?) {
                        Toast.makeText(context, "si", Toast.LENGTH_SHORT).show()
                        binding.foodImage.layoutParams.height = h
                        binding.foodImage.layoutParams.width = w
                    }
                })

                binding.foodImage.setOnTouchListener(this@MainFragment)

                Zoom de las imagenes
                @SuppressLint("ClickableViewAccessibility")
                    override fun onTouch(v: View, event: MotionEvent): Boolean {
                        val view = v as ImageView
                        view.scaleType = ImageView.ScaleType.MATRIX
                        val scale: Float
                        dumpEvent(event)
                        when (event.action and MotionEvent.ACTION_MASK) {
                            MotionEvent.ACTION_DOWN -> {
                                matrix.set(view.imageMatrix)
                                savedMatrix.set(matrix)
                                start.set(event.x, event.y)
                                Log.d(TAG, "mode=DRAG") // write to LogCat
                                mode = DRAG
                            }
                            MotionEvent.ACTION_UP, MotionEvent.ACTION_POINTER_UP -> {
                                mode = NONE
                                Log.d(TAG, "mode=NONE")
                            }
                            MotionEvent.ACTION_POINTER_DOWN -> {
                                oldDist = spacing(event)
                                Log.d(TAG, "oldDist=$oldDist")
                                if (oldDist > 5f) {
                                    savedMatrix.set(matrix)
                                    midPoint(mid, event)
                                    mode = ZOOM
                                    Log.d(TAG, "mode=ZOOM")
                                }
                            }
                            MotionEvent.ACTION_MOVE -> if (mode == DRAG) {
                                matrix.set(savedMatrix)
                                matrix.postTranslate(
                                    event.x - start.x,
                                    event.y - start.y
                                ) // create the transformation in the matrix  of points
                            } else if (mode == ZOOM) {
                                // pinch zooming
                                val newDist = spacing(event)
                                Log.d(TAG, "newDist=$newDist")
                                if (newDist > 5f) {
                                    matrix.set(savedMatrix)
                                    scale = newDist / oldDist // setting the scaling of the
                                    // matrix...if scale > 1 means
                                    // zoom in...if scale < 1 means
                                    // zoom out
                                    matrix.postScale(scale, scale, mid.x, mid.y)
                                }
                            }
                        }
                        view.imageMatrix = matrix // display the transformation on screen
                        return true // indicate event was handled
                    }

                    /*
                     * --------------------------------------------------------------------------
                     * Method: spacing Parameters: MotionEvent Returns: float Description:
                     * checks the spacing between the two fingers on touch
                     * ----------------------------------------------------
                     */

                    /*
                     * --------------------------------------------------------------------------
                     * Method: spacing Parameters: MotionEvent Returns: float Description:
                     * checks the spacing between the two fingers on touch
                     * ----------------------------------------------------
                     */
                    private fun spacing(event: MotionEvent): Float {
                        val x = event.getX(0) - event.getX(1)
                        val y = event.getY(0) - event.getY(1)
                        return Math.sqrt((x * x + y * y).toDouble()).toFloat()
                    }

                    /*
                     * --------------------------------------------------------------------------
                     * Method: midPoint Parameters: PointF object, MotionEvent Returns: void
                     * Description: calculates the midpoint between the two fingers
                     * ------------------------------------------------------------
                     */

                    /*
                     * --------------------------------------------------------------------------
                     * Method: midPoint Parameters: PointF object, MotionEvent Returns: void
                     * Description: calculates the midpoint between the two fingers
                     * ------------------------------------------------------------
                     */
                    private fun midPoint(point: PointF, event: MotionEvent) {
                        val x = event.getX(0) + event.getX(1)
                        val y = event.getY(0) + event.getY(1)
                        point[x / 2] = y / 2
                    }

                    /** Show an event in the LogCat view, for debugging  */
                    private fun dumpEvent(event: MotionEvent) {
                        val names = arrayOf(
                            "DOWN",
                            "UP",
                            "MOVE",
                            "CANCEL",
                            "OUTSIDE",
                            "POINTER_DOWN",
                            "POINTER_UP",
                            "7?",
                            "8?",
                            "9?"
                        )
                        val sb = StringBuilder()
                        val action = event.action
                        val actionCode = action and MotionEvent.ACTION_MASK
                        sb.append("event ACTION_").append(names[actionCode])
                        if (actionCode == MotionEvent.ACTION_POINTER_DOWN || actionCode == MotionEvent.ACTION_POINTER_UP) {
                            sb.append("(pid ").append(action shr MotionEvent.ACTION_POINTER_ID_SHIFT)
                            sb.append(")")
                        }
                        sb.append("[")
                        for (i in 0 until event.pointerCount) {
                            sb.append("#").append(i)
                            sb.append("(pid ").append(event.getPointerId(i))
                            sb.append(")=").append(event.getX(i).toInt())
                            sb.append(",").append(event.getY(i).toInt())
                            if (i + 1 < event.pointerCount) sb.append(";")
                        }
                        sb.append("]")
                        Log.d("Touch Events ---------", sb.toString())
                    }